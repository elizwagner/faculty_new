prop.test(
x = c(tab$`Tenure Track`[i], tab$`Non-tenure Track`[i]),
n = c(tt_tot, ntt_tot)
)$p.value
})
pairwise_list[[entry$question_label]] <- tibble(
Question       = entry$question_label,
Response       = tab$Level,
`TT Count`     = tab$`Tenure Track`,
`NTT Count`    = tab$`Non-tenure Track`,
`Raw p-value`  = round(raw_p, 3),
`χ²/Fisher p`  = round(entry$chi_p_value, 3)
)
}
# 4) assemble & re‐level Response, then arrange
final_table <- bind_rows(pairwise_list) %>%
mutate(
Response = factor(Response, levels = response_order)
) %>%
arrange(Question, Response) %>%
select(-Question)
# 5) render kable + pack_rows
kbl_obj <- kbl(final_table, format = "html", digits = 4, align = "c") %>%
kable_styling(
bootstrap_options = c("hover", "condensed", "bordered"),
full_width = FALSE, position = "center"
)
start_row <- 1
for (q in unique(bind_rows(pairwise_list)$Question)) {
n_rows <- sum(bind_rows(pairwise_list)$Question == q)
kbl_obj <- pack_rows(
kbl_obj,
group_label = q,
start_row,
start_row + n_rows - 1,
bold = TRUE
)
start_row <- start_row + n_rows
}
kbl_obj
# 1) filter
selected_questions <- c("_v82", "_v84", "_v86")
wellbeing_data <- all_responses_all_questions_long %>%
filter(
Category == "Well-being",
Question %in% selected_questions,
Level != "NA",
!str_detect(Label.y, "Other - Text")
)
# 2) chi‐square / Fisher per question (store *all* p‐values)
unique_questions <- unique(wellbeing_data$Question)
chi_results <- list()
for (q in unique_questions) {
subset <- wellbeing_data %>%
filter(Question == q, Group %in% c("Tenure Track", "Non-tenure Track"))
tab <- subset %>%
count(Level, Group, wt = Count, name = "Total") %>%
pivot_wider(names_from = Group, values_from = Total, values_fill = 0)
mat <- as.matrix(tab[, c("Tenure Track", "Non-tenure Track")])
rownames(mat) <- tab$Level
test <- if (any(chisq.test(mat)$expected < 5)) fisher.test(mat) else chisq.test(mat)
# store every question
chi_results[[q]] <- list(
question_label = unique(subset$Label.y),
data           = tab,
total_TT       = sum(tab$`Tenure Track`),
total_NTT      = sum(tab$`Non-tenure Track`),
chi_p_value    = test$p.value
)
}
# 3) pairwise proportion tests
pairwise_list <- list()
for (entry in chi_results) {
tab     <- entry$data
tt_tot  <- entry$total_TT
ntt_tot <- entry$total_NTT
raw_p <- map_dbl(seq_len(nrow(tab)), function(i) {
prop.test(
x = c(tab$`Tenure Track`[i], tab$`Non-tenure Track`[i]),
n = c(tt_tot, ntt_tot)
)$p.value
})
pairwise_list[[entry$question_label]] <- tibble(
Question       = entry$question_label,
Response       = tab$Level,
`TT Count`     = tab$`Tenure Track`,
`NTT Count`    = tab$`Non-tenure Track`,
`Raw p-value`  = round(raw_p, 3),
`χ²/Fisher p`  = round(entry$chi_p_value, 3)
)
}
# 4) assemble & arrange
final_table <- bind_rows(pairwise_list) %>%
arrange(Question, Response) %>%
select(-Question)
# 5) render kable + pack_rows
kbl_obj <- kbl(final_table, format = "html", digits = 4, align = "c") %>%
kable_styling(
bootstrap_options = c("hover", "condensed", "bordered"),
full_width = FALSE,
position = "center"
)
start_row <- 1
for (q in unique(bind_rows(pairwise_list)$Question)) {
n_rows <- sum(bind_rows(pairwise_list)$Question == q)
kbl_obj <- pack_rows(
kbl_obj,
group_label = q,
start_row,
start_row + n_rows - 1,
bold = TRUE
)
start_row <- start_row + n_rows
}
kbl_obj
# 0) define the exact response order you want:
response_order <- c(
"Strongly disagree",
"Somewhat disagree",
"Neither agree nor disagree",
"Somewhat agree",
"Strongly agree"
)
# Filter for Rank/Title category, exclude Level == "NA", exclude 'Other - Text', and include only selected questions
equity_data <- all_responses_all_questions_long %>%
filter(
Category == "Equity, morale, respect, and satisfaction",
Level != "NA",
str_detect(Label.y, "agree"),
!str_detect(Label.y, "Other - Text"),
!str_detect(tolower(Label.y), "how many")  # excludes anything containing "how many"
)
# 1) filter & re‐level
wellbeing_data <- all_responses_all_questions_long %>%
filter(
Category == "Equity, morale, respect, and satisfaction",
Level != "NA",
str_detect(Label.y, "I can")
) %>%
mutate(
Level = factor(Level, levels = response_order)
)
# 2) chi‐square / Fisher per question (store *all* p‐values)
unique_questions <- unique(wellbeing_data$Question)
chi_results <- list()
for (q in unique_questions) {
subset <- wellbeing_data %>%
filter(Question == q, Group %in% c("Tenure Track", "Non-tenure Track"))
tab <- subset %>%
count(Level, Group, wt = Count, name = "Total") %>%
pivot_wider(names_from = Group, values_from = Total, values_fill = 0)
mat <- as.matrix(tab[, c("Tenure Track", "Non-tenure Track")])
rownames(mat) <- tab$Level
test <- if (any(chisq.test(mat)$expected < 5)) fisher.test(mat) else chisq.test(mat)
# store *every* result now
chi_results[[q]] <- list(
question_label = unique(subset$Label.y),
data           = tab,
total_TT       = sum(tab$`Tenure Track`),
total_NTT      = sum(tab$`Non-tenure Track`),
chi_p_value    = test$p.value
)
}
# 3) pairwise prop.tests
pairwise_list <- list()
for (entry in chi_results) {
tab     <- entry$data
tt_tot  <- entry$total_TT
ntt_tot <- entry$total_NTT
# compute raw proportion test p-values
raw_p <- map_dbl(seq_len(nrow(tab)), function(i) {
prop.test(
x = c(tab$`Tenure Track`[i], tab$`Non-tenure Track`[i]),
n = c(tt_tot, ntt_tot)
)$p.value
})
pairwise_list[[entry$question_label]] <- tibble(
Question        = entry$question_label,
Response        = tab$Level,
`TT Count`      = tab$`Tenure Track`,
`NTT Count`     = tab$`Non-tenure Track`,
`Raw p-value`   = round(raw_p, 3),
`χ²/Fisher p`   = round(entry$chi_p_value, 3)
)
}
# 4) assemble & re‐level Response
final_table <- bind_rows(pairwise_list) %>%
mutate(
Response = factor(Response, levels = response_order)
) %>%
arrange(Question, Response) %>%
select(-Question)
# 0) define the exact response order you want:
response_order <- c(
"Strongly disagree",
"Somewhat disagree",
"Neither agree nor disagree",
"Somewhat agree",
"Strongly agree"
)
# Filter for Rank/Title category, exclude Level == "NA", exclude 'Other - Text', and include only selected questions
equity_data <- all_responses_all_questions_long %>%
filter(
Category == "Equity, morale, respect, and satisfaction",
Level != "NA",
str_detect(Label.y, "agree"),
!str_detect(Label.y, "Other - Text"),
!str_detect(tolower(Label.y), "how many")  # excludes anything containing "how many"
)
# 2) chi‐square / Fisher per question (store *all* p‐values)
unique_questions <- unique(equity_data$Question)
chi_results <- list()
for (q in unique_questions) {
subset <- equity_data %>%
filter(Question == q, Group %in% c("Tenure Track", "Non-tenure Track"))
tab <- subset %>%
count(Level, Group, wt = Count, name = "Total") %>%
pivot_wider(names_from = Group, values_from = Total, values_fill = 0)
mat <- as.matrix(tab[, c("Tenure Track", "Non-tenure Track")])
rownames(mat) <- tab$Level
test <- if (any(chisq.test(mat)$expected < 5)) fisher.test(mat) else chisq.test(mat)
# store *every* result now
chi_results[[q]] <- list(
question_label = unique(subset$Label.y),
data           = tab,
total_TT       = sum(tab$`Tenure Track`),
total_NTT      = sum(tab$`Non-tenure Track`),
chi_p_value    = test$p.value
)
}
# 3) pairwise prop.tests
pairwise_list <- list()
for (entry in chi_results) {
tab     <- entry$data
tt_tot  <- entry$total_TT
ntt_tot <- entry$total_NTT
# compute raw proportion test p-values
raw_p <- map_dbl(seq_len(nrow(tab)), function(i) {
prop.test(
x = c(tab$`Tenure Track`[i], tab$`Non-tenure Track`[i]),
n = c(tt_tot, ntt_tot)
)$p.value
})
pairwise_list[[entry$question_label]] <- tibble(
Question        = entry$question_label,
Response        = tab$Level,
`TT Count`      = tab$`Tenure Track`,
`NTT Count`     = tab$`Non-tenure Track`,
`Raw p-value`   = round(raw_p, 3),
`χ²/Fisher p`   = round(entry$chi_p_value, 3)
)
}
# 4) assemble & re‐level Response
final_table <- bind_rows(pairwise_list) %>%
mutate(
Response = factor(Response, levels = response_order)
) %>%
arrange(Question, Response) %>%
select(-Question)
# 0) define the exact response order you want:
response_order <- c(
"Strongly disagree",
"Somewhat disagree",
"Neither agree nor disagree",
"Somewhat agree",
"Strongly agree"
)
# Filter for Rank/Title category, exclude Level == "NA", exclude 'Other - Text', and include only selected questions
equity_data <- all_responses_all_questions_long %>%
filter(
Category == "Equity, morale, respect, and satisfaction",
Level != "NA",
str_detect(Level, "agree"),
!str_detect(Label.y, "Other - Text"),
!str_detect(tolower(Label.y), "how many")  # excludes anything containing "how many"
)
# 2) chi‐square / Fisher per question (store *all* p‐values)
unique_questions <- unique(equity_data$Question)
chi_results <- list()
for (q in unique_questions) {
subset <- equity_data %>%
filter(Question == q, Group %in% c("Tenure Track", "Non-tenure Track"))
tab <- subset %>%
count(Level, Group, wt = Count, name = "Total") %>%
pivot_wider(names_from = Group, values_from = Total, values_fill = 0)
mat <- as.matrix(tab[, c("Tenure Track", "Non-tenure Track")])
rownames(mat) <- tab$Level
test <- if (any(chisq.test(mat)$expected < 5)) fisher.test(mat) else chisq.test(mat)
# store *every* result now
chi_results[[q]] <- list(
question_label = unique(subset$Label.y),
data           = tab,
total_TT       = sum(tab$`Tenure Track`),
total_NTT      = sum(tab$`Non-tenure Track`),
chi_p_value    = test$p.value
)
}
# 3) pairwise prop.tests
pairwise_list <- list()
for (entry in chi_results) {
tab     <- entry$data
tt_tot  <- entry$total_TT
ntt_tot <- entry$total_NTT
# compute raw proportion test p-values
raw_p <- map_dbl(seq_len(nrow(tab)), function(i) {
prop.test(
x = c(tab$`Tenure Track`[i], tab$`Non-tenure Track`[i]),
n = c(tt_tot, ntt_tot)
)$p.value
})
pairwise_list[[entry$question_label]] <- tibble(
Question        = entry$question_label,
Response        = tab$Level,
`TT Count`      = tab$`Tenure Track`,
`NTT Count`     = tab$`Non-tenure Track`,
`Raw p-value`   = round(raw_p, 3),
`χ²/Fisher p`   = round(entry$chi_p_value, 3)
)
}
# 4) assemble & re‐level Response
final_table <- bind_rows(pairwise_list) %>%
mutate(
Response = factor(Response, levels = response_order)
) %>%
arrange(Question, Response) %>%
select(-Question)
# 5) render kable + pack_rows
kbl_obj <- kbl(final_table, format = "html", digits = 4, align = "c") %>%
kable_styling(
bootstrap_options = c("hover", "condensed", "bordered"),
full_width = FALSE, position = "center"
)
start_row <- 1
for (q in unique(bind_rows(pairwise_list)$Question)) {
n_rows <- sum(bind_rows(pairwise_list)$Question == q)
kbl_obj <- pack_rows(
kbl_obj,
group_label = q,
start_row,
start_row + n_rows - 1,
bold = TRUE
)
start_row <- start_row + n_rows
}
kbl_obj
# 0) define the exact response order you want:
response_order <- c(
"Very unaligned",
"Somewhat unaligned",
"Neither aligned nor unaligned",
"Somewhat well aligned",
"Very well aligned"
)
# Filter for Rank/Title category, exclude Level == "NA", exclude 'Other - Text', and include only selected questions
effort_data <- all_responses_all_questions_long %>%
filter(
Category == "Effort Distribution",
Level != "NA",
str_detect(Level, "aligned"),
!str_detect(Label.y, "Other - Text"),
!str_detect(tolower(Label.y), "how many")  # excludes anything containing "how many"
)
# 2) chi‐square / Fisher per question (store *all* p‐values)
unique_questions <- unique(effort_data$Question)
chi_results <- list()
for (q in unique_questions) {
subset <- effort_data %>%
filter(Question == q, Group %in% c("Tenure Track", "Non-tenure Track"))
tab <- subset %>%
count(Level, Group, wt = Count, name = "Total") %>%
pivot_wider(names_from = Group, values_from = Total, values_fill = 0)
mat <- as.matrix(tab[, c("Tenure Track", "Non-tenure Track")])
rownames(mat) <- tab$Level
test <- if (any(chisq.test(mat)$expected < 5)) fisher.test(mat) else chisq.test(mat)
# store *every* result now
chi_results[[q]] <- list(
question_label = unique(subset$Label.y),
data           = tab,
total_TT       = sum(tab$`Tenure Track`),
total_NTT      = sum(tab$`Non-tenure Track`),
chi_p_value    = test$p.value
)
}
# 3) pairwise prop.tests
pairwise_list <- list()
for (entry in chi_results) {
tab     <- entry$data
tt_tot  <- entry$total_TT
ntt_tot <- entry$total_NTT
# compute raw proportion test p-values
raw_p <- map_dbl(seq_len(nrow(tab)), function(i) {
prop.test(
x = c(tab$`Tenure Track`[i], tab$`Non-tenure Track`[i]),
n = c(tt_tot, ntt_tot)
)$p.value
})
pairwise_list[[entry$question_label]] <- tibble(
Question        = entry$question_label,
Response        = tab$Level,
`TT Count`      = tab$`Tenure Track`,
`NTT Count`     = tab$`Non-tenure Track`,
`Raw p-value`   = round(raw_p, 3),
`χ²/Fisher p`   = round(entry$chi_p_value, 3)
)
}
# 4) assemble & re‐level Response
final_table <- bind_rows(pairwise_list) %>%
mutate(
Response = factor(Response, levels = response_order)
) %>%
arrange(Question, Response) %>%
select(-Question)
# 5) render kable + pack_rows
kbl_obj <- kbl(final_table, format = "html", digits = 4, align = "c") %>%
kable_styling(
bootstrap_options = c("hover", "condensed", "bordered"),
full_width = FALSE, position = "center"
)
start_row <- 1
for (q in unique(bind_rows(pairwise_list)$Question)) {
n_rows <- sum(bind_rows(pairwise_list)$Question == q)
kbl_obj <- pack_rows(
kbl_obj,
group_label = q,
start_row,
start_row + n_rows - 1,
bold = TRUE
)
start_row <- start_row + n_rows
}
kbl_obj
library(readxl)
library(dplyr)
library(ggplot2)
library(stringr)
library(tidyr)
library(knitr)
library(kableExtra)
library(purrr)
library(broom)
library(tidytext)
library(wordcloud)
library(RColorBrewer)
# Set global ggplot theme with extra top margin, centered, full-width, bold titles
theme_set(
theme_minimal() +
theme(
plot.margin = margin(t = 30, r = 10, b = 10, l = 10),
plot.title.position = "plot",
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),  # Center the subtitle
legend.position = "none"  # Hide legend globally
)
)
# Load data
all_responses_all_questions <- read_excel("all_responses_all_questions.xlsx")
# Reshape to long format including counts and proportions
all_responses_all_questions_long <- all_responses_all_questions %>%
select(
Question, Category, Label.y, Level,
Count_overall, Count_tenure, Count_nontenure,
Proportion_nonNA_overall, Proportion_nonNA_tenure, Proportion_nonNA_nontenure
) %>%
pivot_longer(
cols = starts_with("Count_") | starts_with("Proportion_nonNA_"),
names_to = c(".value", "Group"),
names_pattern = "(.*)_(overall|tenure|nontenure)"
) %>%
mutate(
Group = recode(Group,
"overall"    = "Overall",
"tenure"     = "Tenure Track",
"nontenure"  = "Non-tenure Track"
),
Group = factor(Group, levels = c("Overall", "Tenure Track", "Non-tenure Track"))
)
# Define group colors
group_colors <- c(
"Overall"          = "#1F78B4",  # dark blue
"Tenure Track"     = "#E66101",  # dark orange
"Non-tenure Track" = "#4DAF4A"   # dark green
)
# 1) filter
selected_questions <- c("_v188")
effort_data <- all_responses_all_questions_long %>%
filter(
Category == "Effort Distribution",
Question %in% selected_questions,
Level != "NA",
!str_detect(Label.y, "Other - Text")
)
# 2) chi‐square / Fisher per question (store *all* p‐values)
unique_questions <- unique(effort_data$Question)
chi_results <- list()
for (q in unique_questions) {
subset <- effort_data %>%
filter(Question == q, Group %in% c("Tenure Track", "Non-tenure Track"))
tab <- subset %>%
count(Level, Group, wt = Count, name = "Total") %>%
pivot_wider(names_from = Group, values_from = Total, values_fill = 0)
mat <- as.matrix(tab[, c("Tenure Track", "Non-tenure Track")])
rownames(mat) <- tab$Level
test <- if (any(chisq.test(mat)$expected < 5)) fisher.test(mat) else chisq.test(mat)
# store every question
chi_results[[q]] <- list(
question_label = unique(subset$Label.y),
data           = tab,
total_TT       = sum(tab$`Tenure Track`),
total_NTT      = sum(tab$`Non-tenure Track`),
chi_p_value    = test$p.value
)
}
